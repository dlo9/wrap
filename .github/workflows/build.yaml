name: Build

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: self-hosted

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Nix
        uses: DeterminateSystems/determinate-nix-action@v3.6.1

      - name: Install devenv
        run: nix profile install nixpkgs#devenv

      # Ensure rustc is available for the rust cache step
      - name: Setup PATH
        run: devenv shell 'echo $PATH' >> $GITHUB_PATH

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Lint
        run: devenv shell 'just lint'

      - name: Build and Test
        run: devenv shell 'just test'

      - name: Get Latest Release
        id: changelog
        if: github.ref == 'refs/heads/main'
        shell: bash
        run: |
          changelog="CHANGELOG.md"

          # Parse the release versions from existing tags and the changelog
          # TODO: accept prelease versions
          latestGithubRelease="$(git tag -l --sort=-refname '[0-9]*\.[0-9]*\.[0-9]*' | head -1)"
          latestChangelogRelease="$(sed -r 's!^## \[([0-9]+\.[0-9]+.[0-9]+)\].*!\1!; T d; :q q; :d d;' "$changelog")"

          # Skip if there's no new release
          if [[ -z "$latestChangelogRelease" ]] || [[ "$latestGithubRelease" == "$latestChangelogRelease" ]]; then
            exit
          fi

          changes="$(awk -v version="$latestChangelogRelease" '/^$/ { next } /[0-9]+\.[0-9]+\.[0-9]+/ { IN_VERSION=0 } IN_VERSION { print } $0 ~ "^## \\[" version "\\]" { IN_VERSION=1; }' "$changelog")"

          printf "%s=%s\n" "version" "$latestChangelogRelease" >> "$GITHUB_OUTPUT"
          printf "%s<<EOF\n%s\nEOF\n" "changes" "$changes" >> "$GITHUB_OUTPUT"

      - name: Build Release
        if: github.ref == 'refs/heads/main' && steps.changelog.outputs.version != ''
        run: devenv shell cargo build --release

      - name: Rename Release Artifacts
        if: github.ref == 'refs/heads/main' && steps.changelog.outputs.version != ''
        id: artifacts
        run: |
          # Formatted name
          name="wrap-${{ steps.changelog.outputs.version }}-${{ runner.os }}-${{ runner.arch }}"

          # Make lowercase
          name="$(echo "$name" | tr '[:upper:]' '[:lower:]')"

          # Do the rename
          mv target/release/wrap "$name"

          # Save to output
          printf "%s=%s\n" "name" "$name" >> "$GITHUB_OUTPUT"

      - name: Create Release
        if: github.ref == 'refs/heads/main' && steps.changelog.outputs.version != ''
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: false
          artifactErrorsFailBuild: true
          artifacts: ${{ steps.artifacts.outputs.name }}
          body: ${{ steps.changelog.outputs.changes }}
          tag: ${{ steps.changelog.outputs.version }}
          commit: main
          makeLatest: true
          prerelease: false
